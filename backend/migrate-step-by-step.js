const { Pool } = require('pg');

// –í—Å—Ç–∞–≤—å —Å–≤–æ–π DATABASE_URL –∏–∑ Railway
const DATABASE_URL = 'postgresql://postgres:YAMcWkigCPoTJghxoWZPktzASqhFcqbq@tramway.proxy.rlwy.net:50447/railway';

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function migrate() {
  try {
    console.log('üîÑ Starting step-by-step migration...\n');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üóëÔ∏è  Dropping existing tables...');
    await pool.query('DROP TABLE IF EXISTS habit_marks CASCADE');
    await pool.query('DROP TABLE IF EXISTS reminders CASCADE');
    await pool.query('DROP TABLE IF EXISTS habits CASCADE');
    await pool.query('DROP TABLE IF EXISTS subscriptions CASCADE');
    await pool.query('DROP TABLE IF EXISTS users CASCADE');
    await pool.query('DROP TABLE IF EXISTS categories CASCADE');
    await pool.query('DROP TABLE IF EXISTS motivational_messages CASCADE');
    console.log('‚úÖ Tables dropped\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –æ–¥–Ω–æ–π
    console.log('üìã Creating categories table...');
    await pool.query(`
      CREATE TABLE categories (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        emoji VARCHAR(10) NOT NULL,
        color VARCHAR(7) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ categories created');
    
    console.log('üìã Creating motivational_messages table...');
    await pool.query(`
      CREATE TABLE motivational_messages (
        id SERIAL PRIMARY KEY,
        message TEXT NOT NULL,
        language VARCHAR(2) DEFAULT 'en',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ motivational_messages created');
    
    console.log('üìã Creating users table...');
    await pool.query(`
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        language_code VARCHAR(10) DEFAULT 'en',
        timezone VARCHAR(50) DEFAULT 'UTC',
        is_premium BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ users created');
    
    console.log('üìã Creating subscriptions table...');
    await pool.query(`
      CREATE TABLE subscriptions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        starts_at TIMESTAMP NOT NULL,
        ends_at TIMESTAMP NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ subscriptions created');
    
    console.log('üìã Creating habits table...');
    await pool.query(`
      CREATE TABLE habits (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        category_id INTEGER REFERENCES categories(id),
        title VARCHAR(255) NOT NULL,
        goal VARCHAR(255),
        reminder_time TIME NOT NULL,
        is_bad_habit BOOLEAN DEFAULT FALSE,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ habits created');
    
    console.log('üìã Creating habit_marks table...');
    await pool.query(`
      CREATE TABLE habit_marks (
        id SERIAL PRIMARY KEY,
        habit_id INTEGER REFERENCES habits(id) ON DELETE CASCADE,
        date DATE NOT NULL,
        status VARCHAR(20) NOT NULL CHECK (status IN ('done', 'undone', 'skipped')),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(habit_id, date)
      )
    `);
    console.log('‚úÖ habit_marks created');
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüìä Creating indexes...');
    await pool.query('CREATE INDEX idx_users_telegram_id ON users(telegram_id)');
    await pool.query('CREATE INDEX idx_habits_user_id ON habits(user_id)');
    await pool.query('CREATE INDEX idx_habit_marks_habit_id ON habit_marks(habit_id)');
    await pool.query('CREATE INDEX idx_habit_marks_date ON habit_marks(date)');
    console.log('‚úÖ Indexes created\n');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üå± Adding seed data...');
    
    console.log('Adding categories...');
    await pool.query(`
      INSERT INTO categories (name, emoji, color) VALUES
      ('Sport', 'üèÉ', '#FF6B6B'),
      ('Health', 'üíß', '#4ECDC4'),
      ('Education', 'üìö', '#45B7D1'),
      ('Mindfulness', 'üßò', '#96CEB4'),
      ('Productivity', 'üéØ', '#FECA57')
    `);
    console.log('‚úÖ Categories added');
    
    console.log('Adding motivational messages...');
    await pool.query(`
      INSERT INTO motivational_messages (message, language) VALUES
      ('Yes U Can!', 'en'),
      ('Keep going!', 'en'),
      ('You''re doing great!', 'en'),
      ('Stay strong!', 'en'),
      ('Never give up!', 'en'),
      ('–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!', 'ru'),
      ('–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!', 'ru'),
      ('–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!', 'ru'),
      ('–ù–µ —Å–¥–∞–≤–∞–π—Å—è!', 'ru'),
      ('–¢—ã –º–æ–ª–æ–¥–µ—Ü!', 'ru')
    `);
    console.log('‚úÖ Messages added\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üìä Checking results...');
    const categories = await pool.query('SELECT COUNT(*) FROM categories');
    const messages = await pool.query('SELECT COUNT(*) FROM motivational_messages');
    
    console.log(`‚úÖ Categories: ${categories.rows[0].count}`);
    console.log(`‚úÖ Messages: ${messages.rows[0].count}`);
    
    console.log('\nüéâ Migration completed successfully!');
    
    await pool.end();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Migration error:', error.message);
    console.error('Details:', error);
    await pool.end();
    process.exit(1);
  }
}

migrate();